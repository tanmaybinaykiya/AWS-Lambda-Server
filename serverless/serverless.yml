service: secure-slice
package: ${file(./components/package.yml)}
provider:
  name: aws
  runtime: nodejs4.3
  memorySize: 128
  timeout: 60
  profile: ${opt:profile}
  region: ${opt:region}
  vpc: ${self:custom.${self:custom.currentStage}.vpc}
  iamRoleStatements: ${file(./components/iam.yml)}
custom: ${file(./components/custom.yml)}
functions: 
  authService:
    handler: auth-service/src/services/auth-service/starter/index.handle
    name: ${self:custom.currentStage}-authService
    description: Auth Service
    environment: ${self:custom.writeEnvVars}
    events:
      - http:
          integration: ${self:custom.integration}
          path: auth/{proxy+}
          method: get
          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580
          cors: ${self:custom.cors}
      - http:
          integration: ${self:custom.integration}
          path: auth/{proxy+}
          method: put
          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580
          cors: ${self:custom.cors}
      - http:
          integration: ${self:custom.integration}
          path: auth/{proxy+}
          method: post
          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580
          cors: ${self:custom.cors}
      - http:
          integration: ${self:custom.integration}
          path: auth/{proxy+}
          method: delete
          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580
          cors: ${self:custom.cors}
  institutionService:
    handler: institution-service/src/services/institution-service/starter/index.handle
    name: ${self:custom.currentStage}-institutionService
    description: Institution Service
    environment: ${self:custom.writeEnvVars}
    events:
      - http:
          integration: ${self:custom.integration}
          path: institution/{proxy+}
          method: get
          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580
          cors: ${self:custom.cors}
      - http:
          integration: ${self:custom.integration}
          path: institution/{proxy+}
          method: put
          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580
          cors: ${self:custom.cors}
      - http:
          integration: ${self:custom.integration}
          path: institution/{proxy+}
          method: post
          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580
          cors: ${self:custom.cors}
      - http:
          integration: ${self:custom.integration}
          path: institution/{proxy+}
          method: delete
          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580
          cors: ${self:custom.cors}
  schoolService:
    handler: school-service/src/services/school-service/starter/index.handle
    name: ${self:custom.currentStage}-schoolService
    description: School Service
    environment: ${self:custom.writeEnvVars}
    events:
      - http:
          integration: ${self:custom.integration}
          path: school/{proxy+}
          method: get
          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580
          cors: ${self:custom.cors}
      - http:
          integration: ${self:custom.integration}
          path: school/{proxy+}
          method: put
          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580
          cors: ${self:custom.cors}
      - http:
          integration: ${self:custom.integration}
          path: school/{proxy+}
          method: post
          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580
          cors: ${self:custom.cors}
      - http:
          integration: ${self:custom.integration}
          path: school/{proxy+}
          method: delete
          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580
          cors: ${self:custom.cors}
  studentService:
    handler: student-service/src/services/student-service/starter/index.handle
    name: ${self:custom.currentStage}-studentService
    description: Student Service
    environment: ${self:custom.writeEnvVars}
    events:
      - http:
          integration: ${self:custom.integration}
          path: student/{proxy+}
          method: get
          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580
          cors: ${self:custom.cors}
      - http:
          integration: ${self:custom.integration}
          path: student/{proxy+}
          method: put
          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580
          cors: ${self:custom.cors}
      - http:
          integration: ${self:custom.integration}
          path: student/{proxy+}
          method: post
          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580
          cors: ${self:custom.cors}
      - http:
          integration: ${self:custom.integration}
          path: student/{proxy+}
          method: delete
          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580
          cors: ${self:custom.cors}
  userService:
    handler: user-service/src/services/user-service/starter/index.handle
    name: ${self:custom.currentStage}-userService
    description: User Service
    environment: ${self:custom.writeEnvVars}
    events:
      - http:
          integration: ${self:custom.integration}
          path: user/{proxy+}
          method: get
          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580
          cors: ${self:custom.cors}
      - http:
          integration: ${self:custom.integration}
          path: user/{proxy+}
          method: put
          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580
          cors: ${self:custom.cors}
      - http:
          integration: ${self:custom.integration}
          path: user/{proxy+}
          method: post
          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580
          cors: ${self:custom.cors}
      - http:
          integration: ${self:custom.integration}
          path: user/{proxy+}
          method: delete
          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580
          cors: ${self:custom.cors}
  billingService:
    handler: billing-service/src/services/billing-service/starter/index.handle
    name: ${self:custom.currentStage}-billingService
    description: Billing Service
    environment: ${self:custom.writeEnvVars}
    events:
      - http:
          integration: ${self:custom.integration}
          path: billing/{proxy+}
          method: get
          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580
          cors: ${self:custom.cors}
      - http:
          integration: ${self:custom.integration}
          path: billing/{proxy+}
          method: put
          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580
          cors: ${self:custom.cors}
      - http:
          integration: ${self:custom.integration}
          path: billing/{proxy+}
          method: post
          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580
          cors: ${self:custom.cors}
      - http:
          integration: ${self:custom.integration}
          path: billing/{proxy+}
          method: delete
          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580
          cors: ${self:custom.cors}
plugins:
  - serverless-plugin-write-env-vars
  - serverless-plugin-stage-variables
resources: ${file(./components/resources.yml)}
